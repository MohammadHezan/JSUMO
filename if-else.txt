#define L_RPWM      10
#define L_LPWM      9
#define R_RPWM      5
#define R_LPWM      3

#define LINE_FL     A1
#define LINE_FR     A3
#define LINE_BL     A0
#define LINE_BR     A2

#define IR_LEFT     2
#define IR_CENTER   8
#define IR_RIGHT    7
#define IR_SIDE_LEFT  4
#define IR_SIDE_RIGHT 6

const int ATTACK_SPEED = 255;
const int TURN_SPEED   = 180;
const int SEARCH_SPEED = 150;
const int BACK_SPEED   = 200;

unsigned long lastAction = 0;
const unsigned long ACTION_INTERVAL = 50;

const unsigned long SIDE_TURN_TIME = 300;
unsigned long turnStart = 0;
bool turning = false;
int turnDirection = 0;

int readSensor(int pin) {
  int sum = 0;
  for (int i = 0; i < 3; i++) sum += digitalRead(pin);
  return (sum >= 2);
}

void setMotors(int l_fwd, int l_bwd, int r_fwd, int r_bwd) {
  analogWrite(L_RPWM, l_fwd);
  analogWrite(L_LPWM, l_bwd);
  analogWrite(R_RPWM, r_fwd);
  analogWrite(R_LPWM, r_bwd);
}

void moveLeft(int speed)     { setMotors(0, speed, speed, 0); }
void moveRight(int speed)    { setMotors(speed, 0, 0, speed); }
void moveForward(int speed)  { setMotors(speed, 0, speed, 0); }
void moveBackward(int speed) { setMotors(0, speed, 0, speed); }
void stopMotors()            { setMotors(0,0,0,0); }

void handleLineEdgeCases(int fl, int fr, int bl, int br) {
  if(!fl && !fr) 
    moveBackward(BACK_SPEED);
  else if(!bl && !br) 
    moveForward(BACK_SPEED);
  else if(!fl && !bl) 
  { 
    moveBackward(BACK_SPEED); 
    moveRight(TURN_SPEED); 
  }
  else if(!fr && !br)
  { 
    moveBackward(BACK_SPEED); 
    moveLeft(TURN_SPEED); 
  }
  else if(!fl) 
  { 
    moveBackward(BACK_SPEED); 
    moveRight(TURN_SPEED); 
  }
  else if(!fr) 
  { 
    moveBackward(BACK_SPEED); 
    moveLeft(TURN_SPEED); 
  }
  else if(!bl) 
  { 
    moveForward(BACK_SPEED); 
    moveRight(TURN_SPEED); 
  }
  else if(!br) 
  { 
    moveForward(BACK_SPEED); 
    moveLeft(TURN_SPEED); 
  }
  else if(!fl && !fr && !bl && !br) 
    stopMotors();
}

void setup()
{
  pinMode(L_RPWM, OUTPUT);
  pinMode(L_LPWM, OUTPUT);
  pinMode(R_RPWM, OUTPUT);
  pinMode(R_LPWM, OUTPUT);

  pinMode(LINE_FL, INPUT);
  pinMode(LINE_FR, INPUT);
  pinMode(LINE_BL, INPUT);
  pinMode(LINE_BR, INPUT);

  pinMode(IR_LEFT, INPUT);
  pinMode(IR_CENTER, INPUT);
  pinMode(IR_RIGHT, INPUT);
  pinMode(IR_SIDE_LEFT, INPUT);
  pinMode(IR_SIDE_RIGHT, INPUT);
}

void loop() {
  if (millis() - lastAction < ACTION_INTERVAL) 
    return;
  lastAction = millis();

  int fl = digitalRead(LINE_FL);
  int fr = digitalRead(LINE_FR);
  int bl = digitalRead(LINE_BL);
  int br = digitalRead(LINE_BR);

  if(!fl || !fr || !bl || !br) {
    handleLineEdgeCases(fl, fr, bl, br);
    return;
  }

  int irL  = readSensor(IR_LEFT);
  int irC  = readSensor(IR_CENTER);
  int irR  = readSensor(IR_RIGHT);
  int irSL = readSensor(IR_SIDE_LEFT);
  int irSR = readSensor(IR_SIDE_RIGHT);

  if (!irC || !irL || !irR || !irSL || !irSR)
  {
    if (!irC) {
      turning = false;
      moveForward(ATTACK_SPEED);
      return;
    }
    else if (!irL) 
    { 
      moveLeft(TURN_SPEED); 
      return;
    }
    else if (!irR) 
    { 
      moveRight(TURN_SPEED); 
      return; 
    }
    else if (!irSL) {
      turning = true;
      turnStart = millis();
      turnDirection = -1;
    }
    else if (!irSR) {
      turning = true;
      turnStart = millis();
      turnDirection = +1;
    }
    if (turning) {
      if (millis() - turnStart < SIDE_TURN_TIME) 
      {
        if (turnDirection == -1) 
          moveLeft(TURN_SPEED);
        else 
          moveRight(TURN_SPEED);
        return;
      } 
      else
        turning = false;
    }
  }
  else 
  {
    moveRight(SEARCH_SPEED);
    moveForward(SEARCH_SPEED/2);
  }
}
